//
//  DocumentListPresenter.swift
//  ViperDemo
//
//  Created Thinh Nguyen on 12/3/17.
//  Copyright © 2017 Prospertin. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class DocumentListPresenter: DocumentListPresenterProtocol, DocumentListInteractorOutputProtocol {
    weak private var view: DocumentListViewProtocol?
    var interactor: DocumentListInteractorInputProtocol?
    private let router: DocumentListWireframeProtocol

    //If need to hold on to the UI Models
    var documentUIModels: [DocumentUIModel] = []
    
    init(view: DocumentListViewProtocol, interactor: DocumentListInteractorInputProtocol?, router: DocumentListWireframeProtocol) {
        self.view = view
        self.interactor = interactor
        self.router = router
    }

    // DocumentListPresenterProtocol
    func presentDocuments() {
        let docQuery = DocQuery(
            dupDocsCapSize: 10,
            country: "us",
            pageSize: 20,
            groupFrom: 0,
            dateEnd: "2017-11-07T20:00:19.028Z",
            sortOrder: "DESC",
            groupOption: "close",
            dateStart: "2017-11-02T19:01:49.000Z",
            agents: "2102541",
            page: 0,
            sortField: "date",
            additionalFields: "images")
        
        // Ask interactor for documents
        interactor?.retrieveDocuments(query: docQuery)
    }
    
    func onError(errorMsg: String) {
        self.view?.onError(errorMsg: errorMsg)
    }
    
    // DocumentListInteractorOutputProtocol
    func didRetrieveDocuments(documents: [DocumentModel]) {
        // Receive the documents from interactor
        self.documentUIModels = createDocumentViews(documents)
        view?.showDocuments(with: self.documentUIModels)
    }
    
    func onSelectDocument(selected: DocumentUIModel) {
        self.view?.onError(errorMsg: "Presenter doesn't know how to present selected yet")
    }
    
    // Private helper
    func createDocumentViews(_ documents: [DocumentModel]) -> [DocumentUIModel] {
        return documents.map { rawDoc in
            return DocumentUIModel(document: rawDoc)!
            
        }
    }
}
